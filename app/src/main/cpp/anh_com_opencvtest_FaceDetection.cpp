/* DO NOT EDIT THIS FILE - it is machine generated */
#include <string>
#include <android/log.h>
#include "anh_com_opencvtest_FaceDetection.h"

extern "C"

#define LOG_TAG "FaceDetection/DetectionBasedTracker"
#define LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__))

JNIEXPORT void JNICALL Java_anh_com_opencvtest_FaceDetection_faceDetection
        (JNIEnv *, jclass, jlong addrRgba) {

    Mat &frame = *(Mat *) addrRgba;
    try {
        detect(frame);
    } catch (Exception &e) {
        __android_log_write(ANDROID_LOG_ERROR, "TRACKERS", e.what());
    }
}

JNIEXPORT void JNICALL Java_anh_com_opencvtest_FaceDetection_removeBG
        (JNIEnv *, jclass, jlong addrRgbaOrigin, jlong addrRgba) {
    Mat &frameOrigin = *(Mat *) addrRgbaOrigin;
    Mat &frame = *(Mat *) addrRgba;
    processImages(frameOrigin, frame);
}

void detect(Mat& frame) {
    try {

        String face_cascade_name = "/storage/emulated/0/Android/data/anh.com.opencvtest/cache/cascades/haarcascade_frontalface_alt.xml";
        String eyes_cascade_name = "/storage/emulated/0/Android/data/anh.com.opencvtest/cache/cascades/haarcascade_eye_tree_eyeglasses.xml";
        CascadeClassifier face_cascade;
        CascadeClassifier eyes_cascade;

        if (!face_cascade.load(face_cascade_name)) {
            printf("--(!)Error loading\n");
            return;
        };
        if (!eyes_cascade.load(eyes_cascade_name)) {
            printf("--(!)Error loading\n");
            return;
        };

        std::vector<Rect> faces;
        Mat frame_gray;

        cvtColor(frame, frame_gray, CV_BGR2GRAY);
        equalizeHist(frame_gray, frame_gray);

        //-- Detect faces
        face_cascade.detectMultiScale(frame_gray, faces, 1.1, 2, 0 | CV_HAAR_SCALE_IMAGE,
                                      Size(30, 30));

        for (size_t i = 0; i < faces.size(); i++) {
            Point center(faces[i].x + faces[i].width * 0.5, faces[i].y + faces[i].height * 0.5);

            int radius = cvRound((faces[i].width + faces[i].height) * 0.25);
            circle(frame, center, radius, Scalar(255, 0, 0), 4, 8, 0);
        }
    } catch (Exception &e) {
        __android_log_write(ANDROID_LOG_ERROR, "TRACKERS", e.what());
    }
}

Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor

void processImages(Mat& frameOrigin, Mat& frame) {
    Ptr<BackgroundSubtractor> pMOG2 = createBackgroundSubtractorMOG2();

    pMOG2->apply(frameOrigin, frame);

    rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
              cv::Scalar(255, 255, 255), -1);
}

